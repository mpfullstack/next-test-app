import { GetStaticPaths, InferGetStaticPropsType } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import styles from '../../styles/Home.module.css'
import { GetStaticProps } from 'next'
import { Job, fetchJobs } from '../../src/helpers'

// https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation

export default function Sample({ job }: InferGetStaticPropsType<typeof getStaticProps>) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Sample</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
      <h1>SSG page Jog detail</h1>
        <p>{job.id}</p>
        <p>{job.title}</p>
        <p>{job.slug}</p>
        <p className={styles.description}>
          <Link href="/sample_isr">Go to Sample Incremental Static Regeneration page</Link>
        </p>
        <p className={styles.description}>
          <Link href="/sample_ssr">Go to Sample Server Side Renderder page</Link>
        </p>
      </main>

      <footer className={styles.footer}>
      </footer>
    </div>
  )
}

// This function gets called at build time
export const getStaticProps: GetStaticProps = async (context) => {
  const { params } = context;

  if (!params!.slug) {
    return {
      notFound: true,
    }
  }

  const data = await fetchJobs();

  const job: Job | undefined = data.results.find(
    (result: any) => String(result.id) === String(params!.slug)
  );

  return {
    props: { job }, // will be passed to the page component as props
    revalidate: 30
  }
}

type Path = {
  params: any
  locale: string
};

// This function gets called at build time
export const getStaticPaths: GetStaticPaths = async ({ locales }) => {
  const data = await fetchJobs();

  // Get the paths we want to pre-render based on posts
  const paths = data.results.reduce((accum: Path[], job: any) => {
    locales!.forEach((locale: string) => {
      accum.push({
        params: { slug: String(job.id) },
        locale: locale,
      });
      return accum;
    });
    return accum;
  }, []);

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}